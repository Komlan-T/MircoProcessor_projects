
Lab8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00802000  000003cc  00000440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000670  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000006b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000506f  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003c4f  00000000  00000000  00005777  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000635  00000000  00000000  000093c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000099fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004735  00000000  00000000  00009a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ec  00000000  00000000  0000e1c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000e2b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	12 e2       	ldi	r17, 0x22	; 34
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ec ec       	ldi	r30, 0xCC	; 204
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 34 01 	call	0x268	; 0x268 <main>
 234:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <clock_init>:

	 .section .text

	 .global clock_init
	 clock_init:
		push r24
 23c:	8f 93       	push	r24

		ldi r24, OSC_RC32MEN_bm
 23e:	82 e0       	ldi	r24, 0x02	; 2
		sts OSC_CTRL, r24		;Enables the 32MHz internal oscillator
 240:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>

00000244 <check32MHzStatus>:

	check32MHzStatus:
		lds	r24, OSC_STATUS
 244:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
		;Ensure that the 32MHz clock is ready before proceeding
		sbrs r24, OSC_RC32MRDY_bp
 248:	81 ff       	sbrs	r24, 1
		rjmp check32MHzStatus
 24a:	fc cf       	rjmp	.-8      	; 0x244 <check32MHzStatus>

		;Writing to CCP disables interrupts for a certain number of cycles
		;to give the clock time to switch sources. It also enables writes to certain registers.
		ldi r24, 0xD8
 24c:	88 ed       	ldi	r24, 0xD8	; 216
		sts CPU_CCP, r24				
 24e:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x7de034>

		;Finally, select the now-ready 32MHz oscillator as the new clock source. 
		ldi	r24, 0x01
 252:	81 e0       	ldi	r24, 0x01	; 1
		sts CLK_CTRL, r24
 254:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>

00000258 <skip32MHZ_enable>:
	skip32MHZ_enable:
		;CPU CLK prescaler settings 
		;Use values that are powers of 2 from 1 to 512 (1, 2, 4, 8, 16, ..., 512) for A. See Table 7-2 in the manual. 
		;You can also change B/C. See Table 7-3 in the manual. 

		ldi r24, 0xD8
 258:	88 ed       	ldi	r24, 0xD8	; 216
		sts CPU_CCP, r24
 25a:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x7de034>
	
		clr 24 ;32MHz
 25e:	88 27       	eor	r24, r24
		sts CLK_PSCTRL, r24
 260:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x7de041>

		pop r24
 264:	8f 91       	pop	r24

 266:	08 95       	ret

00000268 <main>:
	0x258,0x27c,0x2a0,0x2c6,0x2ed,0x314,0x33c,0x365,0x38e,0x3b8,0x3e3,0x40e,0x43a,0x467,0x494,0x4c2,
	0x4f0,0x51f,0x54e,0x57d,0x5ad,0x5dd,0x60e,0x63f,0x670,0x6a1,0x6d3,0x705,0x737,0x769,0x79b,0x7cd
};

int main(void)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
   clock_init();
 270:	0e 94 1e 01 	call	0x23c	; 0x23c <clock_init>
   dac_init();
 274:	0e 94 4a 01 	call	0x294	; 0x294 <dac_init>
   dmac_init();
 278:	0e 94 83 01 	call	0x306	; 0x306 <dmac_init>
   tcc0_init();
 27c:	0e 94 65 01 	call	0x2ca	; 0x2ca <tcc0_init>
   
   while (1)
   {
	   DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	31 e0       	ldi	r19, 0x01	; 1
 288:	f9 01       	movw	r30, r18
 28a:	20 89       	ldd	r18, Z+16	; 0x10
 28c:	20 68       	ori	r18, 0x80	; 128
 28e:	fc 01       	movw	r30, r24
 290:	20 8b       	std	Z+16, r18	; 0x10
   }
 292:	f6 cf       	rjmp	.-20     	; 0x280 <main+0x18>

00000294 <dac_init>:
   return 0;
}

void dac_init(void)
{
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
	DACA.CTRLB  = (DAC_CHSEL_SINGLE_gc | DAC_CH0TRIG_bm);
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	93 e0       	ldi	r25, 0x03	; 3
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	fc 01       	movw	r30, r24
 2a4:	21 83       	std	Z+1, r18	; 0x01
	DACA.CTRLC  = DAC_REFSEL_AREFB_gc;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	93 e0       	ldi	r25, 0x03	; 3
 2aa:	28 e1       	ldi	r18, 0x18	; 24
 2ac:	fc 01       	movw	r30, r24
 2ae:	22 83       	std	Z+2, r18	; 0x02
	DACA.CTRLA  = (DAC_CH0EN_bm | DAC_ENABLE_bm);
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	93 e0       	ldi	r25, 0x03	; 3
 2b4:	25 e0       	ldi	r18, 0x05	; 5
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 83       	st	Z, r18
	DACA.EVCTRL = DAC_EVSEL_0_gc;
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	93 e0       	ldi	r25, 0x03	; 3
 2be:	fc 01       	movw	r30, r24
 2c0:	13 82       	std	Z+3, r1	; 0x03
}
 2c2:	00 00       	nop
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <tcc0_init>:

void tcc0_init(void)
{
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
	TCC0.PER     = (((32000000 / 4) / 1975.53) / 256);
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	98 e0       	ldi	r25, 0x08	; 8
 2d6:	2f e0       	ldi	r18, 0x0F	; 15
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	fc 01       	movw	r30, r24
 2dc:	26 a3       	std	Z+38, r18	; 0x26
 2de:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CNT     = 0;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	98 e0       	ldi	r25, 0x08	; 8
 2e4:	fc 01       	movw	r30, r24
 2e6:	10 a2       	std	Z+32, r1	; 0x20
 2e8:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CTRLA   = TC_CLKSEL_DIV4_gc;
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	98 e0       	ldi	r25, 0x08	; 8
 2ee:	23 e0       	ldi	r18, 0x03	; 3
 2f0:	fc 01       	movw	r30, r24
 2f2:	20 83       	st	Z, r18
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 2f4:	80 e8       	ldi	r24, 0x80	; 128
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	20 ec       	ldi	r18, 0xC0	; 192
 2fa:	fc 01       	movw	r30, r24
 2fc:	20 83       	st	Z, r18
}
 2fe:	00 00       	nop
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <dmac_init>:

void dmac_init(void)
{
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
	DMA.CTRL         |= DMA_RESET_bm;
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	31 e0       	ldi	r19, 0x01	; 1
 316:	f9 01       	movw	r30, r18
 318:	20 81       	ld	r18, Z
 31a:	20 64       	ori	r18, 0x40	; 64
 31c:	fc 01       	movw	r30, r24
 31e:	20 83       	st	Z, r18
	
	DMA.CH0.CTRLA     = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm;
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	25 e0       	ldi	r18, 0x05	; 5
 326:	fc 01       	movw	r30, r24
 328:	20 8b       	std	Z+16, r18	; 0x10
	DMA.CH0.ADDRCTRL  = DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc |
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	29 e5       	ldi	r18, 0x59	; 89
 330:	fc 01       	movw	r30, r24
 332:	22 8b       	std	Z+18, r18	; 0x12
					    DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc;
						
	DMA.CH0.TRIGSRC   = DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	fc 01       	movw	r30, r24
 33c:	23 8b       	std	Z+19, r18	; 0x13
	DMA.CH0.TRFCNT    = (uint16_t)(sizeof(sine));
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	32 e0       	ldi	r19, 0x02	; 2
 346:	fc 01       	movw	r30, r24
 348:	24 8b       	std	Z+20, r18	; 0x14
 34a:	35 8b       	std	Z+21, r19	; 0x15
	
	DMA.CH0.SRCADDR0  = (uint8_t)((uintptr_t)sine);
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e2       	ldi	r19, 0x20	; 32
 354:	fc 01       	movw	r30, r24
 356:	20 8f       	std	Z+24, r18	; 0x18
	DMA.CH0.SRCADDR1  = (uint8_t)(((uintptr_t)sine) >> 8);
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e2       	ldi	r19, 0x20	; 32
 360:	23 2f       	mov	r18, r19
 362:	33 27       	eor	r19, r19
 364:	fc 01       	movw	r30, r24
 366:	21 8f       	std	Z+25, r18	; 0x19
	DMA.CH0.SRCADDR2  = (uint8_t)(((uint32_t)((uintptr_t)sine)) >> 16);
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	31 e0       	ldi	r19, 0x01	; 1
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e2       	ldi	r25, 0x20	; 32
 370:	cc 01       	movw	r24, r24
 372:	a0 e0       	ldi	r26, 0x00	; 0
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	cd 01       	movw	r24, r26
 378:	aa 27       	eor	r26, r26
 37a:	bb 27       	eor	r27, r27
 37c:	f9 01       	movw	r30, r18
 37e:	82 8f       	std	Z+26, r24	; 0x1a
	
	DMA.CH0.DESTADDR0 = (uint8_t)((uintptr_t)&DACA.CH0DATA);
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	28 e1       	ldi	r18, 0x18	; 24
 386:	fc 01       	movw	r30, r24
 388:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = (uint8_t)(((uintptr_t)&DACA.CH0DATA) >> 8);
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	23 e0       	ldi	r18, 0x03	; 3
 390:	fc 01       	movw	r30, r24
 392:	25 8f       	std	Z+29, r18	; 0x1d
	DMA.CH0.DESTADDR2 = (uint8_t)(((uint32_t)((uintptr_t)&DACA.CH0DATA)) >> 16);
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	fc 01       	movw	r30, r24
 39a:	16 8e       	std	Z+30, r1	; 0x1e
	
	DMA.CH0.CTRLA    |= DMA_CH_ENABLE_bm;
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	31 e0       	ldi	r19, 0x01	; 1
 3a4:	f9 01       	movw	r30, r18
 3a6:	20 89       	ldd	r18, Z+16	; 0x10
 3a8:	20 68       	ori	r18, 0x80	; 128
 3aa:	fc 01       	movw	r30, r24
 3ac:	20 8b       	std	Z+16, r18	; 0x10
	
	DMA.CTRL         |= DMA_ENABLE_bm;
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	20 e0       	ldi	r18, 0x00	; 0
 3b4:	31 e0       	ldi	r19, 0x01	; 1
 3b6:	f9 01       	movw	r30, r18
 3b8:	20 81       	ld	r18, Z
 3ba:	20 68       	ori	r18, 0x80	; 128
 3bc:	fc 01       	movw	r30, r24
 3be:	20 83       	st	Z, r18
 3c0:	00 00       	nop
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
