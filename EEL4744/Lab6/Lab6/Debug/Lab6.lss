
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000406  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00802000  00802000  0000047a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000050c9  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ff4  00000000  00000000  00005685  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a09  00000000  00000000  00009679  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  0000a084  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003486  00000000  00000000  0000a1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c7  00000000  00000000  0000d67a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000d841  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_2>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a7 30       	cpi	r26, 0x07	; 7
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 1b 01 	call	0x236	; 0x236 <main>
 228:	0c 94 01 02 	jmp	0x402	; 0x402 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <transmit>:
	return 0;
}

void transmit(uint8_t XL_data)
{
	usartd0_out_char(XL_data);
 230:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <usartd0_out_char>
 234:	08 95       	ret

00000236 <main>:
volatile uint8_t z_axis_h;
volatile uint8_t accel_flag = 0;

int main()
{
	spi_init();
 236:	0e 94 c9 01 	call	0x392	; 0x392 <spi_init>
	LSM_init();
 23a:	0e 94 a0 01 	call	0x340	; 0x340 <LSM_init>
	usartd0_init();
 23e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <usartd0_init>
	
	while(1){
		if (accel_flag)
 242:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 246:	88 23       	and	r24, r24
 248:	e1 f3       	breq	.-8      	; 0x242 <main+0xc>
		{
			x_axis_l = LSM_read(OUTX_L_XL);
 24a:	88 e2       	ldi	r24, 0x28	; 40
 24c:	0e 94 8f 01 	call	0x31e	; 0x31e <LSM_read>
 250:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <x_axis_l>
			transmit(x_axis_l);
 254:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <x_axis_l>
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 18 01 	call	0x230	; 0x230 <transmit>
			x_axis_h = LSM_read(OUTX_H_XL);
 25e:	89 e2       	ldi	r24, 0x29	; 41
 260:	0e 94 8f 01 	call	0x31e	; 0x31e <LSM_read>
 264:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <x_axis_h>
			transmit(x_axis_h);
 268:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <x_axis_h>
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 18 01 	call	0x230	; 0x230 <transmit>
			y_axis_l = LSM_read(OUTY_L_XL);
 272:	8a e2       	ldi	r24, 0x2A	; 42
 274:	0e 94 8f 01 	call	0x31e	; 0x31e <LSM_read>
 278:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <y_axis_l>
			transmit(y_axis_l);
 27c:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <y_axis_l>
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 18 01 	call	0x230	; 0x230 <transmit>
			y_axis_h = LSM_read(OUTY_H_XL);
 286:	8b e2       	ldi	r24, 0x2B	; 43
 288:	0e 94 8f 01 	call	0x31e	; 0x31e <LSM_read>
 28c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <y_axis_h>
			transmit(y_axis_h);
 290:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <y_axis_h>
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 18 01 	call	0x230	; 0x230 <transmit>
			z_axis_l = LSM_read(OUTZ_L_XL);
 29a:	8c e2       	ldi	r24, 0x2C	; 44
 29c:	0e 94 8f 01 	call	0x31e	; 0x31e <LSM_read>
 2a0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <z_axis_l>
			transmit(z_axis_l);
 2a4:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <z_axis_l>
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 18 01 	call	0x230	; 0x230 <transmit>
			z_axis_h = LSM_read(OUTZ_H_XL);
 2ae:	8d e2       	ldi	r24, 0x2D	; 45
 2b0:	0e 94 8f 01 	call	0x31e	; 0x31e <LSM_read>
 2b4:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <z_axis_h>
			transmit(z_axis_h);
 2b8:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <z_axis_h>
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 18 01 	call	0x230	; 0x230 <transmit>
			accel_flag = 0;
 2c2:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
			CPU_SREG = CPU_I_bm;
 2c6:	80 e8       	ldi	r24, 0x80	; 128
 2c8:	8f bf       	out	0x3f, r24	; 63
 2ca:	bb cf       	rjmp	.-138    	; 0x242 <main+0xc>

000002cc <__vector_2>:
{
	usartd0_out_char(XL_data);
}

ISR(PORTC_INT0_vect)
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	08 b6       	in	r0, 0x38	; 56
 2d8:	0f 92       	push	r0
 2da:	18 be       	out	0x38, r1	; 56
 2dc:	8f 93       	push	r24
  CPU_SREG = 0x00;
 2de:	1f be       	out	0x3f, r1	; 63
  accel_flag = 1;	
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
 2e6:	8f 91       	pop	r24
 2e8:	0f 90       	pop	r0
 2ea:	08 be       	out	0x38, r0	; 56
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <LSM_write>:

  Input(s): Two 8-bit values read from the relevant SPI module.
  Output(s): N/A
------------------------------------------------------------------------------*/
void LSM_write(uint8_t reg_addr, uint8_t data)
{
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	06 2f       	mov	r16, r22
	PORTF.OUTCLR = SS_bm;
 300:	c0 ea       	ldi	r28, 0xA0	; 160
 302:	d6 e0       	ldi	r29, 0x06	; 6
 304:	10 e1       	ldi	r17, 0x10	; 16
 306:	1e 83       	std	Y+6, r17	; 0x06
	spi_write(reg_addr);
 308:	0e 94 d7 01 	call	0x3ae	; 0x3ae <spi_write>
	spi_write(data);
 30c:	80 2f       	mov	r24, r16
 30e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <spi_write>
	PORTF.OUTSET = SS_bm;
 312:	1d 83       	std	Y+5, r17	; 0x05
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	08 95       	ret

0000031e <LSM_read>:

  Input(s): N/A
  Output(s): 8-bit value read from the relevant SPI module.
------------------------------------------------------------------------------*/
uint8_t LSM_read(uint8_t reg_addr)
{
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
	PORTF.OUTCLR = SS_bm;
 324:	c0 ea       	ldi	r28, 0xA0	; 160
 326:	d6 e0       	ldi	r29, 0x06	; 6
 328:	10 e1       	ldi	r17, 0x10	; 16
 32a:	1e 83       	std	Y+6, r17	; 0x06
	spi_write((uint8_t)(LSM6DSL_SPI_READ_STROBE_bm | reg_addr));
 32c:	80 68       	ori	r24, 0x80	; 128
 32e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <spi_write>
	uint8_t data = spi_read();
 332:	0e 94 de 01 	call	0x3bc	; 0x3bc <spi_read>
	PORTF.OUTSET = SS_bm;
 336:	1d 83       	std	Y+5, r17	; 0x05
	return data;
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	08 95       	ret

00000340 <LSM_init>:
  Output(s): N/A
------------------------------------------------------------------------------*/
void LSM_init(void)
{
	//interrupt source
	PORTC_INT0MASK = INT1;
 340:	80 e4       	ldi	r24, 0x40	; 64
 342:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <__TEXT_REGION_LENGTH__+0x7de64a>
	
	//set interrupt as an input
	PORTC_DIRCLR = INT1;
 346:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x7de642>
	
	//set priority low
	PORTC_INTCTRL = PORT_INT0LVL_LO_gc;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <__TEXT_REGION_LENGTH__+0x7de649>
	
	//sense falling edges
	PORTC_PIN2CTRL = PORT_ISC_FALLING_gc;
 350:	92 e0       	ldi	r25, 0x02	; 2
 352:	90 93 52 06 	sts	0x0652, r25	; 0x800652 <__TEXT_REGION_LENGTH__+0x7de652>
	
	//enable low level interrupts
	PMIC_CTRL = PMIC_LOLVLEN_bm;
 356:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
	
	//turn on global interrupts
	CPU_SREG = CPU_I_bm;
 35a:	80 e8       	ldi	r24, 0x80	; 128
 35c:	8f bf       	out	0x3f, r24	; 63
	
	int16_t wakeup_x = LSM_read(OUTX_L_XL | OUTX_H_XL);
 35e:	89 e2       	ldi	r24, 0x29	; 41
 360:	0e 94 8f 01 	call	0x31e	; 0x31e <LSM_read>
	int16_t wakeup_y = LSM_read(OUTY_L_XL | OUTY_H_XL);
 364:	8b e2       	ldi	r24, 0x2B	; 43
 366:	0e 94 8f 01 	call	0x31e	; 0x31e <LSM_read>
	int16_t wakeup_z = LSM_read(OUTZ_L_XL | OUTZ_H_XL);
 36a:	8d e2       	ldi	r24, 0x2D	; 45
 36c:	0e 94 8f 01 	call	0x31e	; 0x31e <LSM_read>
	
	//software reset
	LSM_write(CTRL3_C, SW_RESET);
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	82 e1       	ldi	r24, 0x12	; 18
 374:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LSM_write>
	
	//enable X, Y, and Z coordinates
	LSM_write(CTRL9_XL, DEN_XYZ);
 378:	60 ee       	ldi	r22, 0xE0	; 224
 37a:	88 e1       	ldi	r24, 0x18	; 24
 37c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LSM_write>
	
	//full scale selection & output data rate
	LSM_write(CTRL1_XL, (ORD_XL_208Hz | FS_XL_2g));
 380:	60 e5       	ldi	r22, 0x50	; 80
 382:	80 e1       	ldi	r24, 0x10	; 16
 384:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LSM_write>
	
	//enable accelerometer interrupt
	LSM_write(INT1_CTRL, INT1_DRDY_XL);
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	8d e0       	ldi	r24, 0x0D	; 13
 38c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LSM_write>
 390:	08 95       	ret

00000392 <spi_init>:
{
	
  /* Initialize the relevant SPI output signals to be in an "idle" state.
   * Refer to the relevant timing diagram within the LSM6DSL data sheet.
   * (You may wish to utilize the macros defined in `spi.h`.) */
  PORTF.OUTSET = SS_bm;
 392:	e0 ea       	ldi	r30, 0xA0	; 160
 394:	f6 e0       	ldi	r31, 0x06	; 6
 396:	80 e1       	ldi	r24, 0x10	; 16
 398:	85 83       	std	Z+5, r24	; 0x05
  PORTF.OUTSET = SCK_bm;
 39a:	80 e8       	ldi	r24, 0x80	; 128
 39c:	85 83       	std	Z+5, r24	; 0x05

  /* Configure the pin direction of relevant SPI signals. */
  PORTF.DIRSET = MOSI_bm |
 39e:	80 eb       	ldi	r24, 0xB0	; 176
 3a0:	81 83       	std	Z+1, r24	; 0x01
				 SS_bm   |
				 SCK_bm;
  PORTF.DIRCLR = MISO_bm;
 3a2:	80 e4       	ldi	r24, 0x40	; 64
 3a4:	82 83       	std	Z+2, r24	; 0x02
	
  /* Set the other relevant SPI configurations. */
  SPIF.CTRL	=   SPI_PRESCALER_DIV16_gc |
 3a6:	8d e5       	ldi	r24, 0x5D	; 93
 3a8:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <__TEXT_REGION_LENGTH__+0x7debc0>
 3ac:	08 95       	ret

000003ae <spi_write>:
}

void spi_write(uint8_t data)
{
	/* Write to the relevant DATA register. */
	SPIF.DATA = data;
 3ae:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>

	/* Wait for relevant transfer to complete. */
	while(!((SPIF.STATUS >> SPI_IF_bp) & 1));
 3b2:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <__TEXT_REGION_LENGTH__+0x7debc2>
 3b6:	88 23       	and	r24, r24
 3b8:	e4 f7       	brge	.-8      	; 0x3b2 <spi_write+0x4>
   * ATxmega128A1U, it would probably make more sense to have some single 
   * function, say `spi_transceive`, that both writes and reads 
   * data, rather than have two functions `spi_write` and `spi_read`,
   * but we will not concern ourselves with this possibility
   * during this semester of the course. */
}
 3ba:	08 95       	ret

000003bc <spi_read>:

uint8_t spi_read(void)
{
  /* Write some arbitrary data to initiate a transfer. */
  SPIF.DATA = 0x37;
 3bc:	87 e3       	ldi	r24, 0x37	; 55
 3be:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>

  /* Wait for relevant transfer to be complete. */
   while(!((SPIF.STATUS >> SPI_IF_bp) & 1));
 3c2:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <__TEXT_REGION_LENGTH__+0x7debc2>
 3c6:	88 23       	and	r24, r24
 3c8:	e4 f7       	brge	.-8      	; 0x3c2 <spi_read+0x6>

  /* After the transmission, return the data that was received. */
  return SPIF.DATA;
 3ca:	80 91 c3 0b 	lds	r24, 0x0BC3	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>
}
 3ce:	08 95       	ret

000003d0 <usartd0_init>:
}

void usartd0_init(void)
{
  /* Configure relevant TxD and RxD pins. */
	PORTD.OUTSET = PIN3_bm;
 3d0:	e0 e6       	ldi	r30, 0x60	; 96
 3d2:	f6 e0       	ldi	r31, 0x06	; 6
 3d4:	88 e0       	ldi	r24, 0x08	; 8
 3d6:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN3_bm;
 3d8:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 3da:	84 e0       	ldi	r24, 0x04	; 4
 3dc:	82 83       	std	Z+2, r24	; 0x02

  /* Configure baud rate. */
	USARTD0.BAUDCTRLA = (uint8_t)BSEL;
 3de:	e0 ea       	ldi	r30, 0xA0	; 160
 3e0:	f9 e0       	ldi	r31, 0x09	; 9
 3e2:	85 e0       	ldi	r24, 0x05	; 5
 3e4:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((BSCALE << 4)|(BSEL >> 8));
 3e6:	80 ea       	ldi	r24, 0xA0	; 160
 3e8:	87 83       	std	Z+7, r24	; 0x07

  /* Configure remainder of serial protocol. */
  /* (In this example, a protocol with 8 data bits, no parity, and
   *  one stop bit is chosen.) */
	USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |
 3ea:	83 e0       	ldi	r24, 0x03	; 3
 3ec:	85 83       	std	Z+5, r24	; 0x05
					 USART_PMODE_DISABLED_gc  	 |
					 USART_CHSIZE_8BIT_gc)       &
					~USART_SBMODE_bm;

  /* Enable receiver and/or transmitter systems. */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 3ee:	88 e1       	ldi	r24, 0x18	; 24
 3f0:	84 83       	std	Z+4, r24	; 0x04
 3f2:	08 95       	ret

000003f4 <usartd0_out_char>:
	/* USARTD0.CTRLA = USART_RXCINTLVL_MED_gc; */
}

void usartd0_out_char(char c)
{
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 3f4:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7de9a1>
 3f8:	95 ff       	sbrs	r25, 5
 3fa:	fc cf       	rjmp	.-8      	; 0x3f4 <usartd0_out_char>
	USARTD0.DATA = c;
 3fc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7de9a0>
 400:	08 95       	ret

00000402 <_exit>:
 402:	f8 94       	cli

00000404 <__stop_program>:
 404:	ff cf       	rjmp	.-2      	; 0x404 <__stop_program>
