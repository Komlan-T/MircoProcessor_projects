
Practical2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000648  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000006bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00802000  00802000  000006bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005ce0  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040be  00000000  00000000  000064f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd8  00000000  00000000  0000a5b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  0000b18c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003841  00000000  00000000  0000b33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000203  00000000  00000000  0000eb7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000ed80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 c1 02 	jmp	0x582	; 0x582 <__vector_2>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__vector_14>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	ad 30       	cpi	r26, 0x0D	; 13
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
 228:	0c 94 22 03 	jmp	0x644	; 0x644 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <LSM_write>:

  Input(s): Two 8-bit values read from the relevant SPI module.
  Output(s): N/A
------------------------------------------------------------------------------*/
void LSM_write(uint8_t reg_addr, uint8_t data)
{
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	06 2f       	mov	r16, r22
	PORTF.OUTCLR = SS_bm;
 23a:	c0 ea       	ldi	r28, 0xA0	; 160
 23c:	d6 e0       	ldi	r29, 0x06	; 6
 23e:	10 e1       	ldi	r17, 0x10	; 16
 240:	1e 83       	std	Y+6, r17	; 0x06
	spi_write(reg_addr);
 242:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <spi_write>
	spi_write(data);
 246:	80 2f       	mov	r24, r16
 248:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <spi_write>
	PORTF.OUTSET = SS_bm;
 24c:	1d 83       	std	Y+5, r17	; 0x05
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	08 95       	ret

00000258 <LSM_read>:

  Input(s): N/A
  Output(s): 8-bit value read from the relevant SPI module.
------------------------------------------------------------------------------*/
uint8_t LSM_read(uint8_t reg_addr)
{
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
	PORTF.OUTCLR = SS_bm;
 25e:	c0 ea       	ldi	r28, 0xA0	; 160
 260:	d6 e0       	ldi	r29, 0x06	; 6
 262:	10 e1       	ldi	r17, 0x10	; 16
 264:	1e 83       	std	Y+6, r17	; 0x06
	spi_write((uint8_t)(LSM6DSL_SPI_READ_STROBE_bm | reg_addr));
 266:	80 68       	ori	r24, 0x80	; 128
 268:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <spi_write>
	uint8_t data = spi_read();
 26c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <spi_read>
	PORTF.OUTSET = SS_bm;
 270:	1d 83       	std	Y+5, r17	; 0x05
	return data;
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	08 95       	ret

0000027a <LSM_init>:
  Output(s): N/A
------------------------------------------------------------------------------*/
void LSM_init(void)
{
	//interrupt source
	PORTC_INT0MASK = INT1;
 27a:	80 e4       	ldi	r24, 0x40	; 64
 27c:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <__TEXT_REGION_LENGTH__+0x7de64a>
	
	//set interrupt as an input
	PORTC_DIRCLR = INT1;
 280:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x7de642>
	
	//set priority low
	PORTC_INTCTRL = PORT_INT0LVL_LO_gc;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <__TEXT_REGION_LENGTH__+0x7de649>
	
	//sense falling edges
	PORTC_PIN2CTRL = PORT_ISC_FALLING_gc;
 28a:	92 e0       	ldi	r25, 0x02	; 2
 28c:	90 93 52 06 	sts	0x0652, r25	; 0x800652 <__TEXT_REGION_LENGTH__+0x7de652>
	
	//enable low level interrupts
	PMIC_CTRL = PMIC_LOLVLEN_bm;
 290:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
	
	//turn on global interrupts
	CPU_SREG = CPU_I_bm;
 294:	80 e8       	ldi	r24, 0x80	; 128
 296:	8f bf       	out	0x3f, r24	; 63
	
	int16_t wakeup_x = LSM_read(OUTX_L_XL | OUTX_H_XL);
 298:	89 e2       	ldi	r24, 0x29	; 41
 29a:	0e 94 2c 01 	call	0x258	; 0x258 <LSM_read>
	int16_t wakeup_y = LSM_read(OUTY_L_XL | OUTY_H_XL);
 29e:	8b e2       	ldi	r24, 0x2B	; 43
 2a0:	0e 94 2c 01 	call	0x258	; 0x258 <LSM_read>
	int16_t wakeup_z = LSM_read(OUTZ_L_XL | OUTZ_H_XL);
 2a4:	8d e2       	ldi	r24, 0x2D	; 45
 2a6:	0e 94 2c 01 	call	0x258	; 0x258 <LSM_read>
	
	//software reset
	LSM_write(CTRL3_C, SW_RESET);
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	82 e1       	ldi	r24, 0x12	; 18
 2ae:	0e 94 18 01 	call	0x230	; 0x230 <LSM_write>
	
	//enable X, Y, and Z coordinates
	LSM_write(CTRL9_XL, DEN_XYZ);
 2b2:	60 ee       	ldi	r22, 0xE0	; 224
 2b4:	88 e1       	ldi	r24, 0x18	; 24
 2b6:	0e 94 18 01 	call	0x230	; 0x230 <LSM_write>
	
	//full scale selection & output data rate
	LSM_write(CTRL1_XL, (ORD_XL_208Hz | FS_XL_2g));
 2ba:	60 e5       	ldi	r22, 0x50	; 80
 2bc:	80 e1       	ldi	r24, 0x10	; 16
 2be:	0e 94 18 01 	call	0x230	; 0x230 <LSM_write>
	
	//enable accelerometer interrupt
	LSM_write(INT1_CTRL, INT1_DRDY_XL);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	8d e0       	ldi	r24, 0x0D	; 13
 2c6:	0e 94 18 01 	call	0x230	; 0x230 <LSM_write>
 2ca:	08 95       	ret

000002cc <transmit>:
	return 0;
}

void transmit(uint8_t XL_data)
{
	usartd0_out_char(XL_data);
 2cc:	0e 94 1b 03 	call	0x636	; 0x636 <usartd0_out_char>
 2d0:	08 95       	ret

000002d2 <dac_init>:
}

void dac_init(void)
{
	DACA.CTRLB = DAC_CHSEL_SINGLE_gc;
 2d2:	e0 e0       	ldi	r30, 0x00	; 0
 2d4:	f3 e0       	ldi	r31, 0x03	; 3
 2d6:	11 82       	std	Z+1, r1	; 0x01
	DACA.CTRLC = DAC_REFSEL_AREFB_gc;
 2d8:	88 e1       	ldi	r24, 0x18	; 24
 2da:	82 83       	std	Z+2, r24	; 0x02
	DACA.CTRLA = (DAC_CH0EN_bm | DAC_ENABLE_bm);
 2dc:	85 e0       	ldi	r24, 0x05	; 5
 2de:	80 83       	st	Z, r24
 2e0:	08 95       	ret

000002e2 <tcc0_init>:
}

void tcc0_init(void)
{
	TCC0_PER = (((2000000 / 4) * 370) / 1000);
 2e2:	88 ea       	ldi	r24, 0xA8	; 168
 2e4:	92 ed       	ldi	r25, 0xD2	; 210
 2e6:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x7de826>
 2ea:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x7de827>
	TCC0.CNT = 0;
 2ee:	e0 e0       	ldi	r30, 0x00	; 0
 2f0:	f8 e0       	ldi	r31, 0x08	; 8
 2f2:	10 a2       	std	Z+32, r1	; 0x20
 2f4:	11 a2       	std	Z+33, r1	; 0x21
	TCC0_CTRLA = TC_CLKSEL_DIV4_gc;
 2f6:	83 e0       	ldi	r24, 0x03	; 3
 2f8:	80 83       	st	Z, r24
 2fa:	08 95       	ret

000002fc <main>:
volatile uint16_t y;
volatile uint16_t z;

int main()
{
	spi_init();
 2fc:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <spi_init>
	LSM_init();
 300:	0e 94 3d 01 	call	0x27a	; 0x27a <LSM_init>
	usartd0_init();
 304:	0e 94 09 03 	call	0x612	; 0x612 <usartd0_init>
	dac_init();
 308:	0e 94 69 01 	call	0x2d2	; 0x2d2 <dac_init>
	tcc0_init();
 30c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <tcc0_init>
	
	PMIC_CTRL = PMIC_LOLVLEN_bm;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
	CPU_SREG = CPU_I_bm;
 316:	90 e8       	ldi	r25, 0x80	; 128
 318:	9f bf       	out	0x3f, r25	; 63
	
	PORTK.OUTSET = PIN0_bm;
 31a:	e0 e2       	ldi	r30, 0x20	; 32
 31c:	f7 e0       	ldi	r31, 0x07	; 7
 31e:	85 83       	std	Z+5, r24	; 0x05
	PORTK.DIRSET = PIN0_bm;
 320:	81 83       	std	Z+1, r24	; 0x01
	
	
	while(1){
		if (accel_flag)
 322:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 326:	88 23       	and	r24, r24
 328:	e1 f3       	breq	.-8      	; 0x322 <main+0x26>
		{
			x_axis_l = LSM_read(OUTX_L_XL);
 32a:	88 e2       	ldi	r24, 0x28	; 40
 32c:	0e 94 2c 01 	call	0x258	; 0x258 <LSM_read>
 330:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <x_axis_l>
			transmit(x_axis_l);
 334:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <x_axis_l>
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
			x_axis_h = LSM_read(OUTX_H_XL);
 33e:	89 e2       	ldi	r24, 0x29	; 41
 340:	0e 94 2c 01 	call	0x258	; 0x258 <LSM_read>
 344:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <x_axis_h>
			transmit(x_axis_h);
 348:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <x_axis_h>
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
			y_axis_l = LSM_read(OUTY_L_XL);
 352:	8a e2       	ldi	r24, 0x2A	; 42
 354:	0e 94 2c 01 	call	0x258	; 0x258 <LSM_read>
 358:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <y_axis_l>
			transmit(y_axis_l);
 35c:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <y_axis_l>
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
			y_axis_h = LSM_read(OUTY_H_XL);
 366:	8b e2       	ldi	r24, 0x2B	; 43
 368:	0e 94 2c 01 	call	0x258	; 0x258 <LSM_read>
 36c:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <y_axis_h>
			transmit(y_axis_h);
 370:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <y_axis_h>
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
			z_axis_l = LSM_read(OUTZ_L_XL);
 37a:	8c e2       	ldi	r24, 0x2C	; 44
 37c:	0e 94 2c 01 	call	0x258	; 0x258 <LSM_read>
 380:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <z_axis_l>
			transmit(z_axis_l);
 384:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <z_axis_l>
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
			z_axis_h = LSM_read(OUTZ_H_XL);
 38e:	8d e2       	ldi	r24, 0x2D	; 45
 390:	0e 94 2c 01 	call	0x258	; 0x258 <LSM_read>
 394:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <z_axis_h>
			//transmit(z_axis_h);
			
			x = x_axis_h | x_axis_l;
 398:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <x_axis_h>
 39c:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <x_axis_l>
 3a0:	89 2b       	or	r24, r25
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <x>
 3a8:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <x+0x1>
			y = y_axis_h | y_axis_l;
 3ac:	90 91 0c 20 	lds	r25, 0x200C	; 0x80200c <y_axis_h>
 3b0:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <y_axis_l>
 3b4:	89 2b       	or	r24, r25
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <y>
 3bc:	90 93 0a 20 	sts	0x200A, r25	; 0x80200a <y+0x1>
			z = z_axis_h | z_axis_l;
 3c0:	90 91 0b 20 	lds	r25, 0x200B	; 0x80200b <z_axis_h>
 3c4:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <z_axis_l>
 3c8:	89 2b       	or	r24, r25
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <z>
 3d0:	90 93 06 20 	sts	0x2006, r25	; 0x802006 <z+0x1>
			
			if ((z > 0) & (x <= 0) & (y <= 0))
 3d4:	40 91 05 20 	lds	r20, 0x2005	; 0x802005 <z>
 3d8:	50 91 06 20 	lds	r21, 0x2006	; 0x802006 <z+0x1>
 3dc:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <x>
 3e0:	30 91 02 20 	lds	r19, 0x2002	; 0x802002 <x+0x1>
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	45 2b       	or	r20, r21
 3e8:	09 f4       	brne	.+2      	; 0x3ec <main+0xf0>
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	23 2b       	or	r18, r19
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <main+0xf8>
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	89 23       	and	r24, r25
 3f6:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <y>
 3fa:	30 91 0a 20 	lds	r19, 0x200A	; 0x80200a <y+0x1>
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	23 2b       	or	r18, r19
 402:	09 f0       	breq	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	88 23       	and	r24, r24
 408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	43 c0       	rjmp	.+134    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 40c:	99 23       	and	r25, r25
 40e:	09 f4       	brne	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	40 c0       	rjmp	.+128    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			{
				transmit('F');
 412:	86 e4       	ldi	r24, 0x46	; 70
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('l');
 41a:	8c e6       	ldi	r24, 0x6C	; 108
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('a');
 422:	81 e6       	ldi	r24, 0x61	; 97
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('t');
 42a:	84 e7       	ldi	r24, 0x74	; 116
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit(' ');
 432:	80 e2       	ldi	r24, 0x20	; 32
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('o');
 43a:	8f e6       	ldi	r24, 0x6F	; 111
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('n');
 442:	8e e6       	ldi	r24, 0x6E	; 110
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit(' ');
 44a:	80 e2       	ldi	r24, 0x20	; 32
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('t');
 452:	84 e7       	ldi	r24, 0x74	; 116
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('a');
 45a:	81 e6       	ldi	r24, 0x61	; 97
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('b');
 462:	82 e6       	ldi	r24, 0x62	; 98
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('l');
 46a:	8c e6       	ldi	r24, 0x6C	; 108
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('e');
 472:	85 e6       	ldi	r24, 0x65	; 101
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				while(!(DACB.STATUS & DAC_CH0DRE_bm));
 47a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
 47e:	80 ff       	sbrs	r24, 0
 480:	fc cf       	rjmp	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
				DACA.CH0DATA = x;
 482:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <x>
 486:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <x+0x1>
 48a:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <__TEXT_REGION_LENGTH__+0x7de318>
 48e:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <__TEXT_REGION_LENGTH__+0x7de319>

			}
			if ((x > 0) & (x == 0) & (y == 0))
 492:	40 91 01 20 	lds	r20, 0x2001	; 0x802001 <x>
 496:	50 91 02 20 	lds	r21, 0x2002	; 0x802002 <x+0x1>
 49a:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <x>
 49e:	30 91 02 20 	lds	r19, 0x2002	; 0x802002 <x+0x1>
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	45 2b       	or	r20, r21
 4a6:	09 f4       	brne	.+2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	23 2b       	or	r18, r19
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	89 23       	and	r24, r25
 4b4:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <y>
 4b8:	30 91 0a 20 	lds	r19, 0x200A	; 0x80200a <y+0x1>
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	23 2b       	or	r18, r19
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	88 23       	and	r24, r24
 4c6:	09 f4       	brne	.+2      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c8:	4b c0       	rjmp	.+150    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 4ca:	99 23       	and	r25, r25
 4cc:	09 f4       	brne	.+2      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4ce:	48 c0       	rjmp	.+144    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
			{
				transmit('O');
 4d0:	8f e4       	ldi	r24, 0x4F	; 79
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('M');
 4d8:	8d e4       	ldi	r24, 0x4D	; 77
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('B');
 4e0:	82 e4       	ldi	r24, 0x42	; 66
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit(' ');
 4e8:	80 e2       	ldi	r24, 0x20	; 32
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('p');
 4f0:	80 e7       	ldi	r24, 0x70	; 112
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('i');
 4f8:	89 e6       	ldi	r24, 0x69	; 105
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('n');
 500:	8e e6       	ldi	r24, 0x6E	; 110
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('s');
 508:	83 e7       	ldi	r24, 0x73	; 115
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit(' ');
 510:	80 e2       	ldi	r24, 0x20	; 32
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('o');
 518:	8f e6       	ldi	r24, 0x6F	; 111
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('n');
 520:	8e e6       	ldi	r24, 0x6E	; 110
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit(' ');
 528:	80 e2       	ldi	r24, 0x20	; 32
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('t');
 530:	84 e7       	ldi	r24, 0x74	; 116
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('o');
 538:	8f e6       	ldi	r24, 0x6F	; 111
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				transmit('p');
 540:	80 e7       	ldi	r24, 0x70	; 112
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 66 01 	call	0x2cc	; 0x2cc <transmit>
				while(!(DACB.STATUS & DAC_CH0DRE_bm));
 548:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
 54c:	80 ff       	sbrs	r24, 0
 54e:	fc cf       	rjmp	.-8      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
				DACA.CH0DATA = y;
 550:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <y>
 554:	90 91 0a 20 	lds	r25, 0x200A	; 0x80200a <y+0x1>
 558:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <__TEXT_REGION_LENGTH__+0x7de318>
 55c:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <__TEXT_REGION_LENGTH__+0x7de319>

			}
			if ((y < 0) & (x == 0) & (z == 0))
 560:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <y>
 564:	90 91 0a 20 	lds	r25, 0x200A	; 0x80200a <y+0x1>
 568:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <x>
 56c:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <x+0x1>
 570:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <z>
 574:	90 91 06 20 	lds	r25, 0x2006	; 0x802006 <z+0x1>
				transmit('p');
				while(!(DACB.STATUS & DAC_CH0DRE_bm));
				DACA.CH0DATA = z;

			}
			accel_flag = 0;
 578:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
			CPU_SREG = CPU_I_bm;
 57c:	80 e8       	ldi	r24, 0x80	; 128
 57e:	8f bf       	out	0x3f, r24	; 63
 580:	d0 ce       	rjmp	.-608    	; 0x322 <main+0x26>

00000582 <__vector_2>:
	TCC0.CNT = 0;
	TCC0_CTRLA = TC_CLKSEL_DIV4_gc;
}

ISR(PORTC_INT0_vect)
{
 582:	1f 92       	push	r1
 584:	0f 92       	push	r0
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	0f 92       	push	r0
 58a:	11 24       	eor	r1, r1
 58c:	08 b6       	in	r0, 0x38	; 56
 58e:	0f 92       	push	r0
 590:	18 be       	out	0x38, r1	; 56
 592:	8f 93       	push	r24
  CPU_SREG = 0x00;
 594:	1f be       	out	0x3f, r1	; 63
  accel_flag = 1;	
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
}
 59c:	8f 91       	pop	r24
 59e:	0f 90       	pop	r0
 5a0:	08 be       	out	0x38, r0	; 56
 5a2:	0f 90       	pop	r0
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	0f 90       	pop	r0
 5a8:	1f 90       	pop	r1
 5aa:	18 95       	reti

000005ac <__vector_14>:

ISR(TCC0_OVF_vect)
{
 5ac:	1f 92       	push	r1
 5ae:	0f 92       	push	r0
 5b0:	0f b6       	in	r0, 0x3f	; 63
 5b2:	0f 92       	push	r0
 5b4:	11 24       	eor	r1, r1
 5b6:	08 b6       	in	r0, 0x38	; 56
 5b8:	0f 92       	push	r0
 5ba:	18 be       	out	0x38, r1	; 56
 5bc:	8f 93       	push	r24
	PORTK.OUTTGL = PIN0_bm;
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <__TEXT_REGION_LENGTH__+0x7de727>
 5c4:	8f 91       	pop	r24
 5c6:	0f 90       	pop	r0
 5c8:	08 be       	out	0x38, r0	; 56
 5ca:	0f 90       	pop	r0
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	0f 90       	pop	r0
 5d0:	1f 90       	pop	r1
 5d2:	18 95       	reti

000005d4 <spi_init>:
{
	
  /* Initialize the relevant SPI output signals to be in an "idle" state.
   * Refer to the relevant timing diagram within the LSM6DSL data sheet.
   * (You may wish to utilize the macros defined in `spi.h`.) */
  PORTF.OUTSET = SS_bm;
 5d4:	e0 ea       	ldi	r30, 0xA0	; 160
 5d6:	f6 e0       	ldi	r31, 0x06	; 6
 5d8:	80 e1       	ldi	r24, 0x10	; 16
 5da:	85 83       	std	Z+5, r24	; 0x05
  PORTF.OUTSET = SCK_bm;
 5dc:	80 e8       	ldi	r24, 0x80	; 128
 5de:	85 83       	std	Z+5, r24	; 0x05

  /* Configure the pin direction of relevant SPI signals. */
  PORTF.DIRSET = MOSI_bm |
 5e0:	80 eb       	ldi	r24, 0xB0	; 176
 5e2:	81 83       	std	Z+1, r24	; 0x01
				 SS_bm   |
				 SCK_bm;
  PORTF.DIRCLR = MISO_bm;
 5e4:	80 e4       	ldi	r24, 0x40	; 64
 5e6:	82 83       	std	Z+2, r24	; 0x02
	
  /* Set the other relevant SPI configurations. */
  SPIF.CTRL	=   SPI_PRESCALER_DIV16_gc |
 5e8:	8d e5       	ldi	r24, 0x5D	; 93
 5ea:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <__TEXT_REGION_LENGTH__+0x7debc0>
 5ee:	08 95       	ret

000005f0 <spi_write>:
}

void spi_write(uint8_t data)
{
	/* Write to the relevant DATA register. */
	SPIF.DATA = data;
 5f0:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>

	/* Wait for relevant transfer to complete. */
	while(!((SPIF.STATUS >> SPI_IF_bp) & 1));
 5f4:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <__TEXT_REGION_LENGTH__+0x7debc2>
 5f8:	88 23       	and	r24, r24
 5fa:	e4 f7       	brge	.-8      	; 0x5f4 <spi_write+0x4>
   * ATxmega128A1U, it would probably make more sense to have some single 
   * function, say `spi_transceive`, that both writes and reads 
   * data, rather than have two functions `spi_write` and `spi_read`,
   * but we will not concern ourselves with this possibility
   * during this semester of the course. */
}
 5fc:	08 95       	ret

000005fe <spi_read>:

uint8_t spi_read(void)
{
  /* Write some arbitrary data to initiate a transfer. */
  SPIF.DATA = 0x37;
 5fe:	87 e3       	ldi	r24, 0x37	; 55
 600:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>

  /* Wait for relevant transfer to be complete. */
   while(!((SPIF.STATUS >> SPI_IF_bp) & 1));
 604:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <__TEXT_REGION_LENGTH__+0x7debc2>
 608:	88 23       	and	r24, r24
 60a:	e4 f7       	brge	.-8      	; 0x604 <spi_read+0x6>

  /* After the transmission, return the data that was received. */
  return SPIF.DATA;
 60c:	80 91 c3 0b 	lds	r24, 0x0BC3	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>
}
 610:	08 95       	ret

00000612 <usartd0_init>:
}

void usartd0_init(void)
{
  /* Configure relevant TxD and RxD pins. */
	PORTD.OUTSET = PIN3_bm;
 612:	e0 e6       	ldi	r30, 0x60	; 96
 614:	f6 e0       	ldi	r31, 0x06	; 6
 616:	88 e0       	ldi	r24, 0x08	; 8
 618:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN3_bm;
 61a:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 61c:	84 e0       	ldi	r24, 0x04	; 4
 61e:	82 83       	std	Z+2, r24	; 0x02

  /* Configure baud rate. */
	USARTD0.BAUDCTRLA = (uint8_t)BSEL;
 620:	e0 ea       	ldi	r30, 0xA0	; 160
 622:	f9 e0       	ldi	r31, 0x09	; 9
 624:	87 e0       	ldi	r24, 0x07	; 7
 626:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((BSCALE << 4)|(BSEL >> 8));
 628:	80 ed       	ldi	r24, 0xD0	; 208
 62a:	87 83       	std	Z+7, r24	; 0x07

  /* Configure remainder of serial protocol. */
  /* (In this example, a protocol with 8 data bits, no parity, and
   *  one stop bit is chosen.) */
	USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |
 62c:	83 e0       	ldi	r24, 0x03	; 3
 62e:	85 83       	std	Z+5, r24	; 0x05
					 USART_PMODE_DISABLED_gc  	 |
					 USART_CHSIZE_8BIT_gc)       &
					~USART_SBMODE_bm;

  /* Enable receiver and/or transmitter systems. */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 630:	88 e1       	ldi	r24, 0x18	; 24
 632:	84 83       	std	Z+4, r24	; 0x04
 634:	08 95       	ret

00000636 <usartd0_out_char>:
	/* USARTD0.CTRLA = USART_RXCINTLVL_MED_gc; */
}

void usartd0_out_char(char c)
{
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 636:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7de9a1>
 63a:	95 ff       	sbrs	r25, 5
 63c:	fc cf       	rjmp	.-8      	; 0x636 <usartd0_out_char>
	USARTD0.DATA = c;
 63e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7de9a0>
 642:	08 95       	ret

00000644 <_exit>:
 644:	f8 94       	cli

00000646 <__stop_program>:
 646:	ff cf       	rjmp	.-2      	; 0x646 <__stop_program>
